// Code generated by mockery v2.24.0. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	session "github.com/browserkube/browserkube/pkg/session"

	v1 "github.com/browserkube/browserkube/operator/api/v1"
)

// Provisioner is an autogenerated mock type for the Provisioner type
type Provisioner struct {
	mock.Mock
}

// Available provides a mock function with given fields: ctx
func (_m *Provisioner) Available(ctx context.Context) (*v1.BrowserSetList, error) {
	ret := _m.Called(ctx)

	var r0 *v1.BrowserSetList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*v1.BrowserSetList, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *v1.BrowserSetList); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.BrowserSetList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *Provisioner) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Logs provides a mock function with given fields: ctx, id, follow
func (_m *Provisioner) Logs(ctx context.Context, id string, follow bool) (io.ReadCloser, error) {
	ret := _m.Called(ctx, id, follow)

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) (io.ReadCloser, error)); ok {
		return rf(ctx, id, follow)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) io.ReadCloser); ok {
		r0 = rf(ctx, id, follow)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = rf(ctx, id, follow)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Provision provides a mock function with given fields: ctx, name, opts
func (_m *Provisioner) Provision(ctx context.Context, name string, opts *session.Capabilities) (*v1.Browser, error) {
	ret := _m.Called(ctx, name, opts)

	var r0 *v1.Browser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *session.Capabilities) (*v1.Browser, error)); ok {
		return rf(ctx, name, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *session.Capabilities) *v1.Browser); ok {
		r0 = rf(ctx, name, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Browser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *session.Capabilities) error); ok {
		r1 = rf(ctx, name, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, bs
func (_m *Provisioner) Update(ctx context.Context, bs *v1.BrowserSet) error {
	ret := _m.Called(ctx, bs)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.BrowserSet) error); ok {
		r0 = rf(ctx, bs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewProvisioner interface {
	mock.TestingT
	Cleanup(func())
}

// NewProvisioner creates a new instance of Provisioner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProvisioner(t mockConstructorTestingTNewProvisioner) *Provisioner {
	mock := &Provisioner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
