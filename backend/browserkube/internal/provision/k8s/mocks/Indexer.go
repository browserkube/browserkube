// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	cache "k8s.io/client-go/tools/cache"
)

// Indexer is an autogenerated mock type for the Indexer type
type Indexer struct {
	mock.Mock
}

// Add provides a mock function with given fields: obj
func (_m *Indexer) Add(obj interface{}) error {
	ret := _m.Called(obj)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddIndexers provides a mock function with given fields: newIndexers
func (_m *Indexer) AddIndexers(newIndexers cache.Indexers) error {
	ret := _m.Called(newIndexers)

	if len(ret) == 0 {
		panic("no return value specified for AddIndexers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(cache.Indexers) error); ok {
		r0 = rf(newIndexers)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ByIndex provides a mock function with given fields: indexName, indexedValue
func (_m *Indexer) ByIndex(indexName, indexedValue string) ([]interface{}, error) {
	ret := _m.Called(indexName, indexedValue)

	if len(ret) == 0 {
		panic("no return value specified for ByIndex")
	}

	var r0 []interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]interface{}, error)); ok {
		return rf(indexName, indexedValue)
	}
	if rf, ok := ret.Get(0).(func(string, string) []interface{}); ok {
		r0 = rf(indexName, indexedValue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(indexName, indexedValue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: obj
func (_m *Indexer) Delete(obj interface{}) error {
	ret := _m.Called(obj)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: obj
func (_m *Indexer) Get(obj interface{}) (interface{}, bool, error) {
	ret := _m.Called(obj)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 interface{}
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}) (interface{}, bool, error)); ok {
		return rf(obj)
	}
	if rf, ok := ret.Get(0).(func(interface{}) interface{}); ok {
		r0 = rf(obj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}) bool); ok {
		r1 = rf(obj)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(interface{}) error); ok {
		r2 = rf(obj)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetByKey provides a mock function with given fields: key
func (_m *Indexer) GetByKey(key string) (interface{}, bool, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetByKey")
	}

	var r0 interface{}
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (interface{}, bool, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(key)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetIndexers provides a mock function with given fields:
func (_m *Indexer) GetIndexers() cache.Indexers {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetIndexers")
	}

	var r0 cache.Indexers
	if rf, ok := ret.Get(0).(func() cache.Indexers); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cache.Indexers)
		}
	}

	return r0
}

// Index provides a mock function with given fields: indexName, obj
func (_m *Indexer) Index(indexName string, obj interface{}) ([]interface{}, error) {
	ret := _m.Called(indexName, obj)

	if len(ret) == 0 {
		panic("no return value specified for Index")
	}

	var r0 []interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string, interface{}) ([]interface{}, error)); ok {
		return rf(indexName, obj)
	}
	if rf, ok := ret.Get(0).(func(string, interface{}) []interface{}); ok {
		r0 = rf(indexName, obj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string, interface{}) error); ok {
		r1 = rf(indexName, obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IndexKeys provides a mock function with given fields: indexName, indexedValue
func (_m *Indexer) IndexKeys(indexName, indexedValue string) ([]string, error) {
	ret := _m.Called(indexName, indexedValue)

	if len(ret) == 0 {
		panic("no return value specified for IndexKeys")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]string, error)); ok {
		return rf(indexName, indexedValue)
	}
	if rf, ok := ret.Get(0).(func(string, string) []string); ok {
		r0 = rf(indexName, indexedValue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(indexName, indexedValue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields:
func (_m *Indexer) List() []interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func() []interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}

// ListIndexFuncValues provides a mock function with given fields: indexName
func (_m *Indexer) ListIndexFuncValues(indexName string) []string {
	ret := _m.Called(indexName)

	if len(ret) == 0 {
		panic("no return value specified for ListIndexFuncValues")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(indexName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// ListKeys provides a mock function with given fields:
func (_m *Indexer) ListKeys() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListKeys")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Replace provides a mock function with given fields: _a0, _a1
func (_m *Indexer) Replace(_a0 []interface{}, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Replace")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]interface{}, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Resync provides a mock function with given fields:
func (_m *Indexer) Resync() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Resync")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: obj
func (_m *Indexer) Update(obj interface{}) error {
	ret := _m.Called(obj)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIndexer creates a new instance of Indexer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIndexer(t interface {
	mock.TestingT
	Cleanup(func())
},
) *Indexer {
	mock := &Indexer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
