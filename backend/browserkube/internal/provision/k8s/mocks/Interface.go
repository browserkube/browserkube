// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	rest "k8s.io/client-go/rest"

	v1 "github.com/browserkube/browserkube/operator/pkg/client/v1"
)

// Interface is an autogenerated mock type for the Interface type
type Interface struct {
	mock.Mock
}

// BrowserSets provides a mock function with given fields: namespace
func (_m *Interface) BrowserSets(namespace string) v1.BrowsersSetsInterface {
	ret := _m.Called(namespace)

	if len(ret) == 0 {
		panic("no return value specified for BrowserSets")
	}

	var r0 v1.BrowsersSetsInterface
	if rf, ok := ret.Get(0).(func(string) v1.BrowsersSetsInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.BrowsersSetsInterface)
		}
	}

	return r0
}

// Browsers provides a mock function with given fields: namespace
func (_m *Interface) Browsers(namespace string) v1.BrowsersInterface {
	ret := _m.Called(namespace)

	if len(ret) == 0 {
		panic("no return value specified for Browsers")
	}

	var r0 v1.BrowsersInterface
	if rf, ok := ret.Get(0).(func(string) v1.BrowsersInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.BrowsersInterface)
		}
	}

	return r0
}

// RESTClient provides a mock function with given fields:
func (_m *Interface) RESTClient() rest.Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RESTClient")
	}

	var r0 rest.Interface
	if rf, ok := ret.Get(0).(func() rest.Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rest.Interface)
		}
	}

	return r0
}

// SessionResults provides a mock function with given fields: namespace
func (_m *Interface) SessionResults(namespace string) v1.SessionResultsInterface {
	ret := _m.Called(namespace)

	if len(ret) == 0 {
		panic("no return value specified for SessionResults")
	}

	var r0 v1.SessionResultsInterface
	if rf, ok := ret.Get(0).(func(string) v1.SessionResultsInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.SessionResultsInterface)
		}
	}

	return r0
}

// NewInterface creates a new instance of Interface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInterface(t interface {
	mock.TestingT
	Cleanup(func())
},
) *Interface {
	mock := &Interface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
