// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	flowcontrol "k8s.io/client-go/util/flowcontrol"

	rest "k8s.io/client-go/rest"

	schema "k8s.io/apimachinery/pkg/runtime/schema"

	types "k8s.io/apimachinery/pkg/types"
)

// RestMock is an autogenerated mock type for the Interface type
type RestMock struct {
	mock.Mock
}

// APIVersion provides a mock function with given fields:
func (_m *RestMock) APIVersion() schema.GroupVersion {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for APIVersion")
	}

	var r0 schema.GroupVersion
	if rf, ok := ret.Get(0).(func() schema.GroupVersion); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(schema.GroupVersion)
	}

	return r0
}

// Delete provides a mock function with given fields:
func (_m *RestMock) Delete() *rest.Request {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *rest.Request
	if rf, ok := ret.Get(0).(func() *rest.Request); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.Request)
		}
	}

	return r0
}

// Get provides a mock function with given fields:
func (_m *RestMock) Get() *rest.Request {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *rest.Request
	if rf, ok := ret.Get(0).(func() *rest.Request); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.Request)
		}
	}

	return r0
}

// GetRateLimiter provides a mock function with given fields:
func (_m *RestMock) GetRateLimiter() flowcontrol.RateLimiter {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRateLimiter")
	}

	var r0 flowcontrol.RateLimiter
	if rf, ok := ret.Get(0).(func() flowcontrol.RateLimiter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flowcontrol.RateLimiter)
		}
	}

	return r0
}

// Patch provides a mock function with given fields: pt
func (_m *RestMock) Patch(pt types.PatchType) *rest.Request {
	ret := _m.Called(pt)

	if len(ret) == 0 {
		panic("no return value specified for Patch")
	}

	var r0 *rest.Request
	if rf, ok := ret.Get(0).(func(types.PatchType) *rest.Request); ok {
		r0 = rf(pt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.Request)
		}
	}

	return r0
}

// Post provides a mock function with given fields:
func (_m *RestMock) Post() *rest.Request {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Post")
	}

	var r0 *rest.Request
	if rf, ok := ret.Get(0).(func() *rest.Request); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.Request)
		}
	}

	return r0
}

// Put provides a mock function with given fields:
func (_m *RestMock) Put() *rest.Request {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 *rest.Request
	if rf, ok := ret.Get(0).(func() *rest.Request); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.Request)
		}
	}

	return r0
}

// Verb provides a mock function with given fields: verb
func (_m *RestMock) Verb(verb string) *rest.Request {
	ret := _m.Called(verb)

	if len(ret) == 0 {
		panic("no return value specified for Verb")
	}

	var r0 *rest.Request
	if rf, ok := ret.Get(0).(func(string) *rest.Request); ok {
		r0 = rf(verb)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.Request)
		}
	}

	return r0
}

// NewRestMock creates a new instance of RestMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRestMock(t interface {
	mock.TestingT
	Cleanup(func())
},
) *RestMock {
	mock := &RestMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
