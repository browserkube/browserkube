// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	cache "k8s.io/client-go/tools/cache"

	time "time"
)

// SharedIndexInformer is an autogenerated mock type for the SharedIndexInformer type
type SharedIndexInformer struct {
	mock.Mock
}

// AddEventHandler provides a mock function with given fields: handler
func (_m *SharedIndexInformer) AddEventHandler(handler cache.ResourceEventHandler) (cache.ResourceEventHandlerRegistration, error) {
	ret := _m.Called(handler)

	if len(ret) == 0 {
		panic("no return value specified for AddEventHandler")
	}

	var r0 cache.ResourceEventHandlerRegistration
	var r1 error
	if rf, ok := ret.Get(0).(func(cache.ResourceEventHandler) (cache.ResourceEventHandlerRegistration, error)); ok {
		return rf(handler)
	}
	if rf, ok := ret.Get(0).(func(cache.ResourceEventHandler) cache.ResourceEventHandlerRegistration); ok {
		r0 = rf(handler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cache.ResourceEventHandlerRegistration)
		}
	}

	if rf, ok := ret.Get(1).(func(cache.ResourceEventHandler) error); ok {
		r1 = rf(handler)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddEventHandlerWithResyncPeriod provides a mock function with given fields: handler, resyncPeriod
func (_m *SharedIndexInformer) AddEventHandlerWithResyncPeriod(handler cache.ResourceEventHandler, resyncPeriod time.Duration) (cache.ResourceEventHandlerRegistration, error) {
	ret := _m.Called(handler, resyncPeriod)

	if len(ret) == 0 {
		panic("no return value specified for AddEventHandlerWithResyncPeriod")
	}

	var r0 cache.ResourceEventHandlerRegistration
	var r1 error
	if rf, ok := ret.Get(0).(func(cache.ResourceEventHandler, time.Duration) (cache.ResourceEventHandlerRegistration, error)); ok {
		return rf(handler, resyncPeriod)
	}
	if rf, ok := ret.Get(0).(func(cache.ResourceEventHandler, time.Duration) cache.ResourceEventHandlerRegistration); ok {
		r0 = rf(handler, resyncPeriod)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cache.ResourceEventHandlerRegistration)
		}
	}

	if rf, ok := ret.Get(1).(func(cache.ResourceEventHandler, time.Duration) error); ok {
		r1 = rf(handler, resyncPeriod)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddIndexers provides a mock function with given fields: indexers
func (_m *SharedIndexInformer) AddIndexers(indexers cache.Indexers) error {
	ret := _m.Called(indexers)

	if len(ret) == 0 {
		panic("no return value specified for AddIndexers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(cache.Indexers) error); ok {
		r0 = rf(indexers)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetController provides a mock function with given fields:
func (_m *SharedIndexInformer) GetController() cache.Controller {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetController")
	}

	var r0 cache.Controller
	if rf, ok := ret.Get(0).(func() cache.Controller); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cache.Controller)
		}
	}

	return r0
}

// GetIndexer provides a mock function with given fields:
func (_m *SharedIndexInformer) GetIndexer() cache.Indexer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetIndexer")
	}

	var r0 cache.Indexer
	if rf, ok := ret.Get(0).(func() cache.Indexer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cache.Indexer)
		}
	}

	return r0
}

// GetStore provides a mock function with given fields:
func (_m *SharedIndexInformer) GetStore() cache.Store {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStore")
	}

	var r0 cache.Store
	if rf, ok := ret.Get(0).(func() cache.Store); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cache.Store)
		}
	}

	return r0
}

// HasSynced provides a mock function with given fields:
func (_m *SharedIndexInformer) HasSynced() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HasSynced")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsStopped provides a mock function with given fields:
func (_m *SharedIndexInformer) IsStopped() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsStopped")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// LastSyncResourceVersion provides a mock function with given fields:
func (_m *SharedIndexInformer) LastSyncResourceVersion() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LastSyncResourceVersion")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RemoveEventHandler provides a mock function with given fields: handle
func (_m *SharedIndexInformer) RemoveEventHandler(handle cache.ResourceEventHandlerRegistration) error {
	ret := _m.Called(handle)

	if len(ret) == 0 {
		panic("no return value specified for RemoveEventHandler")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(cache.ResourceEventHandlerRegistration) error); ok {
		r0 = rf(handle)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Run provides a mock function with given fields: stopCh
func (_m *SharedIndexInformer) Run(stopCh <-chan struct{}) {
	_m.Called(stopCh)
}

// SetTransform provides a mock function with given fields: handler
func (_m *SharedIndexInformer) SetTransform(handler cache.TransformFunc) error {
	ret := _m.Called(handler)

	if len(ret) == 0 {
		panic("no return value specified for SetTransform")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(cache.TransformFunc) error); ok {
		r0 = rf(handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetWatchErrorHandler provides a mock function with given fields: handler
func (_m *SharedIndexInformer) SetWatchErrorHandler(handler cache.WatchErrorHandler) error {
	ret := _m.Called(handler)

	if len(ret) == 0 {
		panic("no return value specified for SetWatchErrorHandler")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(cache.WatchErrorHandler) error); ok {
		r0 = rf(handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSharedIndexInformer creates a new instance of SharedIndexInformer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSharedIndexInformer(t interface {
	mock.TestingT
	Cleanup(func())
},
) *SharedIndexInformer {
	mock := &SharedIndexInformer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
