// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package session

import (
	json "encoding/json"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"

	_v1 "github.com/browserkube/browserkube/operator/api/v1"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC80ae7adDecodeGithubComBrowserkubeBrowserkubePkgSession(in *jlexer.Lexer, out *Capabilities) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "platformName":
			out.Platform = string(in.String())
		case "browserVersion":
			out.BrowserVersion = string(in.String())
		case "browserName":
			out.BrowserName = string(in.String())
		case "timeZone":
			out.Timezone = string(in.String())
		case "browserkube:options":
			(out.BrowserKubeOpts).UnmarshalEasyJSON(in)
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjsonC80ae7adEncodeGithubComBrowserkubeBrowserkubePkgSession(out *jwriter.Writer, in Capabilities) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Platform != "" {
		const prefix string = ",\"platformName\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Platform))
	}
	if in.BrowserVersion != "" {
		const prefix string = ",\"browserVersion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BrowserVersion))
	}
	if in.BrowserName != "" {
		const prefix string = ",\"browserName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BrowserName))
	}
	if in.Timezone != "" {
		const prefix string = ",\"timeZone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Timezone))
	}
	if true {
		const prefix string = ",\"browserkube:options\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.BrowserKubeOpts).MarshalEasyJSON(out)
	}
	in.MarshalUnknowns(out, first)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Capabilities) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComBrowserkubeBrowserkubePkgSession(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Capabilities) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComBrowserkubeBrowserkubePkgSession(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Capabilities) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComBrowserkubeBrowserkubePkgSession(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Capabilities) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComBrowserkubeBrowserkubePkgSession(l, v)
}

func easyjsonC80ae7adDecodeGithubComBrowserkubeBrowserkubePkgSession1(in *jlexer.Lexer, out *BrowserKubeOpts) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "reportportal":
			if in.IsNull() {
				in.Skip()
				out.RP = nil
			} else {
				if out.RP == nil {
					out.RP = new(ReportPortalOpts)
				}
				easyjsonC80ae7adDecodeGithubComBrowserkubeBrowserkubePkgSession2(in, out.RP)
			}
		case "user":
			out.User = string(in.String())
		case "token":
			out.Token = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "videoFileName":
			out.VideoFileName = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "manual":
			out.Manual = bool(in.Bool())
		case "enableVideo":
			out.EnableVideo = bool(in.Bool())
		case "screenResolution":
			out.ScreenResolution = string(in.String())
		case "enableVNC":
			out.EnableVNC = bool(in.Bool())
		case "extensions":
			if in.IsNull() {
				in.Skip()
				out.Extensions = nil
			} else {
				in.Delim('[')
				if out.Extensions == nil {
					if !in.IsDelim(']') {
						out.Extensions = make([]_v1.BrowserExtension, 0, 1)
					} else {
						out.Extensions = []_v1.BrowserExtension{}
					}
				} else {
					out.Extensions = (out.Extensions)[:0]
				}
				for !in.IsDelim(']') {
					var v1 _v1.BrowserExtension
					easyjsonC80ae7adDecodeGithubComBrowserkubeBrowserkubeOperatorApiV1(in, &v1)
					out.Extensions = append(out.Extensions, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjsonC80ae7adEncodeGithubComBrowserkubeBrowserkubePkgSession1(out *jwriter.Writer, in BrowserKubeOpts) {
	out.RawByte('{')
	first := true
	_ = first
	if in.RP != nil {
		const prefix string = ",\"reportportal\":"
		first = false
		out.RawString(prefix[1:])
		easyjsonC80ae7adEncodeGithubComBrowserkubeBrowserkubePkgSession2(out, *in.RP)
	}
	if in.User != "" {
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.User))
	}
	if in.Token != "" {
		const prefix string = ",\"token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Token))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.VideoFileName != "" {
		const prefix string = ",\"videoFileName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VideoFileName))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.Manual {
		const prefix string = ",\"manual\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Manual))
	}
	if in.EnableVideo {
		const prefix string = ",\"enableVideo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.EnableVideo))
	}
	if in.ScreenResolution != "" {
		const prefix string = ",\"screenResolution\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ScreenResolution))
	}
	if in.EnableVNC {
		const prefix string = ",\"enableVNC\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.EnableVNC))
	}
	if len(in.Extensions) != 0 {
		const prefix string = ",\"extensions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v2, v3 := range in.Extensions {
				if v2 > 0 {
					out.RawByte(',')
				}
				easyjsonC80ae7adEncodeGithubComBrowserkubeBrowserkubeOperatorApiV1(out, v3)
			}
			out.RawByte(']')
		}
	}
	in.MarshalUnknowns(out, first)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BrowserKubeOpts) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComBrowserkubeBrowserkubePkgSession1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BrowserKubeOpts) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComBrowserkubeBrowserkubePkgSession1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BrowserKubeOpts) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComBrowserkubeBrowserkubePkgSession1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BrowserKubeOpts) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComBrowserkubeBrowserkubePkgSession1(l, v)
}

func easyjsonC80ae7adDecodeGithubComBrowserkubeBrowserkubeOperatorApiV1(in *jlexer.Lexer, out *_v1.BrowserExtension) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "extensionId":
			out.ExtensionID = string(in.String())
		case "updateUrl":
			out.UpdateURL = string(in.String())
		case "version":
			out.Version = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjsonC80ae7adEncodeGithubComBrowserkubeBrowserkubeOperatorApiV1(out *jwriter.Writer, in _v1.BrowserExtension) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ExtensionID != "" {
		const prefix string = ",\"extensionId\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ExtensionID))
	}
	if in.UpdateURL != "" {
		const prefix string = ",\"updateUrl\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UpdateURL))
	}
	if in.Version != "" {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Version))
	}
	out.RawByte('}')
}

func easyjsonC80ae7adDecodeGithubComBrowserkubeBrowserkubePkgSession2(in *jlexer.Lexer, out *ReportPortalOpts) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "project":
			out.Project = string(in.String())
		case "launchId":
			out.LaunchID = string(in.String())
		case "itemId":
			out.ItemID = string(in.String())
		case "finishItem":
			out.FinishItem = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjsonC80ae7adEncodeGithubComBrowserkubeBrowserkubePkgSession2(out *jwriter.Writer, in ReportPortalOpts) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Project != "" {
		const prefix string = ",\"project\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Project))
	}
	if in.LaunchID != "" {
		const prefix string = ",\"launchId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LaunchID))
	}
	if in.ItemID != "" {
		const prefix string = ",\"itemId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ItemID))
	}
	if in.FinishItem {
		const prefix string = ",\"finishItem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.FinishItem))
	}
	out.RawByte('}')
}
