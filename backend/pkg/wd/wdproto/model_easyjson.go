// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package wdproto

import (
	json "encoding/json"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"

	session "github.com/browserkube/browserkube/pkg/session"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC80ae7adDecodeGithubComBrowserkubeBrowserkubePkgWdWdproto(in *jlexer.Lexer, out *NewSessionRQ) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "desiredCapabilities":
			(out.Capabilities).UnmarshalEasyJSON(in)
		case "capabilities":
			easyjsonC80ae7adDecodeGithubComBrowserkubeBrowserkubePkgWdWdproto1(in, &out.W3CCapabilities)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjsonC80ae7adEncodeGithubComBrowserkubeBrowserkubePkgWdWdproto(out *jwriter.Writer, in NewSessionRQ) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"desiredCapabilities\":"
		first = false
		out.RawString(prefix[1:])
		(in.Capabilities).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"capabilities\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC80ae7adEncodeGithubComBrowserkubeBrowserkubePkgWdWdproto1(out, in.W3CCapabilities)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NewSessionRQ) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComBrowserkubeBrowserkubePkgWdWdproto(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NewSessionRQ) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComBrowserkubeBrowserkubePkgWdWdproto(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NewSessionRQ) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComBrowserkubeBrowserkubePkgWdWdproto(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NewSessionRQ) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComBrowserkubeBrowserkubePkgWdWdproto(l, v)
}

func easyjsonC80ae7adDecodeGithubComBrowserkubeBrowserkubePkgWdWdproto1(in *jlexer.Lexer, out *W3CCapabilities) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "alwaysMatch":
			(out.Capabilities).UnmarshalEasyJSON(in)
		case "firstMatch":
			if in.IsNull() {
				in.Skip()
				out.FirstMatch = nil
			} else {
				in.Delim('[')
				if out.FirstMatch == nil {
					if !in.IsDelim(']') {
						out.FirstMatch = make([]*session.Capabilities, 0, 8)
					} else {
						out.FirstMatch = []*session.Capabilities{}
					}
				} else {
					out.FirstMatch = (out.FirstMatch)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *session.Capabilities
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(session.Capabilities)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.FirstMatch = append(out.FirstMatch, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjsonC80ae7adEncodeGithubComBrowserkubeBrowserkubePkgWdWdproto1(out *jwriter.Writer, in W3CCapabilities) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"alwaysMatch\":"
		first = false
		out.RawString(prefix[1:])
		(in.Capabilities).MarshalEasyJSON(out)
	}
	if len(in.FirstMatch) != 0 {
		const prefix string = ",\"firstMatch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v2, v3 := range in.FirstMatch {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
