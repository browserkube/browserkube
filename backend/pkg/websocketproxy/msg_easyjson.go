// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package websocketproxy

import (
	json "encoding/json"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3bd68309DecodeGithubComBrowserkubeBrowserkubePkgWebsocketproxy(in *jlexer.Lexer, out *Message) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "guid":
			out.GUID = string(in.String())
		case "method":
			out.Method = string(in.String())
		case "params":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Params = make(map[string]interface{})
				} else {
					out.Params = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 interface{}
					if m, ok := v1.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v1.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v1 = in.Interface()
					}
					(out.Params)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "metadata":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Metadata = make(map[string]interface{})
				} else {
					out.Metadata = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 interface{}
					if m, ok := v2.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v2.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v2 = in.Interface()
					}
					(out.Metadata)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "result":
			if m, ok := out.Result.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Result.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Result = in.Interface()
			}
		case "error":
			if in.IsNull() {
				in.Skip()
				out.Error = nil
			} else {
				if out.Error == nil {
					out.Error = new(Error)
				}
				easyjson3bd68309DecodeGithubComBrowserkubeBrowserkubePkgWebsocketproxy1(in, out.Error)
			}
		default:
			out.UnmarshalUnknown(in, key)
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjson3bd68309EncodeGithubComBrowserkubeBrowserkubePkgWebsocketproxy(out *jwriter.Writer, in Message) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"guid\":"
		out.RawString(prefix)
		out.String(string(in.GUID))
	}
	if in.Method != "" {
		const prefix string = ",\"method\":"
		out.RawString(prefix)
		out.String(string(in.Method))
	}
	if len(in.Params) != 0 {
		const prefix string = ",\"params\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v3First := true
			for v3Name, v3Value := range in.Params {
				if v3First {
					v3First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v3Name))
				out.RawByte(':')
				if m, ok := v3Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v3Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v3Value))
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Metadata) != 0 {
		const prefix string = ",\"metadata\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v4First := true
			for v4Name, v4Value := range in.Metadata {
				if v4First {
					v4First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v4Name))
				out.RawByte(':')
				if m, ok := v4Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v4Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v4Value))
				}
			}
			out.RawByte('}')
		}
	}
	if in.Result != nil {
		const prefix string = ",\"result\":"
		out.RawString(prefix)
		if m, ok := in.Result.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Result.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Result))
		}
	}
	if in.Error != nil {
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		easyjson3bd68309EncodeGithubComBrowserkubeBrowserkubePkgWebsocketproxy1(out, *in.Error)
	}
	in.MarshalUnknowns(out, false)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Message) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3bd68309EncodeGithubComBrowserkubeBrowserkubePkgWebsocketproxy(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Message) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3bd68309EncodeGithubComBrowserkubeBrowserkubePkgWebsocketproxy(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Message) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3bd68309DecodeGithubComBrowserkubeBrowserkubePkgWebsocketproxy(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Message) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3bd68309DecodeGithubComBrowserkubeBrowserkubePkgWebsocketproxy(l, v)
}

func easyjson3bd68309DecodeGithubComBrowserkubeBrowserkubePkgWebsocketproxy1(in *jlexer.Lexer, out *Error) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "error":
			easyjson3bd68309DecodeGithubComBrowserkubeBrowserkubePkgWebsocketproxy2(in, &out.Error)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjson3bd68309EncodeGithubComBrowserkubeBrowserkubePkgWebsocketproxy1(out *jwriter.Writer, in Error) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"error\":"
		first = false
		out.RawString(prefix[1:])
		easyjson3bd68309EncodeGithubComBrowserkubeBrowserkubePkgWebsocketproxy2(out, in.Error)
	}
	out.RawByte('}')
}

func easyjson3bd68309DecodeGithubComBrowserkubeBrowserkubePkgWebsocketproxy2(in *jlexer.Lexer, out *ErrorPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "message":
			out.Message = string(in.String())
		case "stack":
			out.Stack = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjson3bd68309EncodeGithubComBrowserkubeBrowserkubePkgWebsocketproxy2(out *jwriter.Writer, in ErrorPayload) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Message != "" {
		const prefix string = ",\"message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Message))
	}
	if in.Stack != "" {
		const prefix string = ",\"stack\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Stack))
	}
	out.RawByte('}')
}
