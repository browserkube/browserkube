browsers:
  namespace: browserkube
  serviceName: sessions
  nodeSelector:
env: dev
name: browserkube
pullPolicy: IfNotPresent
blob:
  minio:
    enabled: true
    secretName:
  url: "s3://browserkube?endpoint=minio.browserkube.svc.cluster.local:9000&disableSSL=true&s3ForcePathStyle=true&region=us-east-1"
  aws:
    enabled: false
    accessKeyID:
    accessKeySecret:
  archive:
    url: "s3://browserkube-archive?endpoint=minio.browserkube.svc.cluster.local:9000&disableSSL=true&s3ForcePathStyle=true&region=us-east-1"
healthcheck:
  enabled: true
  port: 4444
  periodSeconds: 3
  initialDelaySeconds: 5
  timeoutSeconds: 3
  failureThreshold: 5
resources:
  enabled: true
  requests:
    cpu: 150m
    memory: 128Mi
  limits:
    cpu: 200m
    memory: 512Mi
ingress:
  class: nginx
  enabled: true
  hosts:
    - kubernetes.docker.internal
  tls:
    - hosts:
        - kubernetes.docker.internal
      secretName: browserkube-tls
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/x-forwarded-prefix: /$1
    nginx.ingress.kubernetes.io/proxy-body-size: 128m
    nginx.ingress.kubernetes.io/proxy-buffer-size: 512k
    nginx.ingress.kubernetes.io/proxy-buffers-number: "4"
    nginx.ingress.kubernetes.io/proxy-busy-buffers-size: 512k
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "2000"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "1000"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "1000"
  tlsAnnotations:
#    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    #cert-manager.io/acme-challenge-type: http01
    #cert-manager.io/cluster-issuer: "letsencrypt-prod"

sidecar:
  port: 9999
  image: quay.io/browserkube/browserkube-sidecar:v1.0.0
ui:
  port: 8080
  image: quay.io/browserkube/browserkube-ui:v1.0.0
operator:
  image: quay.io/browserkube/browser-operator:v1.0.0
  runAsNonRoot: true
  runAsUser:
  runAsGroup:
backend:
  image: quay.io/browserkube/browserkube:v1.0.0
  volumes:
    sessionResult:
      sizeLimit: 100Mi
      storageClassName: hostpath
recorder:
  image: quay.io/browserkube/recorder:v1.0.0
extensionInstaller:
  image: quay.io/browserkube/extension-installer:v1.0.0
browserUpdater:
  enabled: false
  image: quay.io/browserkube/browser-updater:v1.0.0
sessionArchiver:
  enabled: true
  image: quay.io/browserkube/session-archiver:v1.0.0
xServer:
  image: quay.io/browserkube/x-server:1.0.0
vncServer:
  image: quay.io/browserkube/vnc-server:1.0.0
clipboard:
  image: quay.io/browserkube/clipboard:v1.0.0

rbac:
  create: true
  serviceAccount:
    create: true
    serviceAccountName: browserkube
openshift:
  enabled: false
  backendHost: backend.apps.cluster.com

telemetry:
  prometheus_enabled: "\'true\'"
  version: v1.0.0
  providerEnabled: "\'false\'"
  providerType: 
    zipkin: zipkin
    otlptracehttp: otlptracehttp

grafana:
  enabled: false
  adminPassword: password
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: "nginx"
      nginx.ingress.kubernetes.io/rewrite-target: /$1
      nginx.ingress.kubernetes.io/use-regex: "true"
    path: /grafana/?(.*)
    pathType: ImplementationSpecific
    hosts:
      - kubernetes.docker.internal
  grafana.ini:
    server:
      root_url: http://localhost:3000/grafana
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Tempo
          uid: tempo
          type: tempo
          url: http://{{ .Release.Name }}-tempo:3100
          isDefault: true
          jsonData:
            httpMethod: GET
        - name: Prometheus
          type: prometheus
          uid: prometheus
          url: http://{{ .Release.Name }}-prometheus-server:80
          basicAuth: false
          isDefault: false
          version: 1
          editable: false
          jsonData:
            httpMethod: GET

tempo:
  enabled: false
  tempo:
    receivers:
      zipkin:
        endpoint: "0.0.0.0:9411"
    metricsGenerator:
      enabled: true

prometheus:
  enabled: false
  alertmanager:
    enabled: false
  kube-state-metrics:
    enabled: false
  prometheus-node-exporter:
    enabled: false
  prometheus-pushgateway:
    enabled: false

minio:
  name: minio
  enabled: false
  ingress:
    tls: true
    enabled: true
    hostname: minio.docker.internal
    ingressClassName: nginx

cronJobContext:
  contextTimeout: 30s
